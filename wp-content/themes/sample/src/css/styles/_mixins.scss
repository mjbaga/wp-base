// Color mixin using hsl
@function color($color-name, $opacity: 1) {
  @if $opacity < 1 {
    @return hsla(var(--clr-#{$color-name}) / $opacity);
  } @else {
    @return hsl(var(--clr-#{$color-name}));
  }
}

// Font mixin
@function calc-rem($target, $context: 16px) {
  @return calc($target / $context) * 1rem;
}

@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

@mixin respond-to-max($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (max-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

@mixin respond-between($min, $max) {
  @if map-has-key($breakpoints, $min) and map-has-key($breakpoints, $max) {
    @media (min-width: map-get($breakpoints, $min)) and (max-width: map-get($breakpoints, $max)) {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

@mixin clearfix() {
  zoom: 1; /* For IE 6/7 (trigger hasLayout) */

  &:before,
  &:after {
      content: '';
      display: table;
  }

  &:after { clear: both; }
}